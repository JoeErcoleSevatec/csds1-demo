#!/usr/bin/env groovy

pipeline {
  agent any
  stages {
    stage ('Preparation') {
      steps {
        notifySlack('Starting USCIS CSDS Ruby Build.')
        sh 'git rev-parse HEAD > commit'
        script {
            env.BUILD_RESULT = 'SUCCESS'
            env.GIT_COMMIT = readFile('commit').trim()
        }
        withEnv(["RAILS_ENV=test"]){
          rvm 'bundle install'
          rvm 'bin/spring stop'
          rvm 'bin/rake db:drop'
          rvm 'bin/rake db:create'
          rvm 'bin/rake db:migrate' 
          rvm 'bin/rake db:seed'
        }
      }
    }

    stage ('Unit Tests') {
      steps{
        script{
          try {
            withEnv(["RAILS_ENV=test"]){
              rvm('bin/rake test:all:db')
              notifySlack("${env.GIT_COMMIT} has passed rspec tests")
            }
          }
          catch (e) {
            echo 'Tests Failed'
            notifySlack("${env.GIT_COMMIT} has failed rspec tests" )
            //throw e
            script {
                env.BUILD_RESULT = 'SUCCESS'
            }
          }
        }
      }
    }
    /*
    stage ('SonarQube Analysis') {
      steps{
        withEnv(["BROWSER=/bin/true"]){
          script {
            def sonar = new csds.jenkins.Sonarqube()
            sonar.setServiceName('10.224.224.140')
            rvm 'metric_fu --no-roodi --no-flog'
            sonar.runSonar()
          }
        }
      }
    }
    */
    stage ('Brakeman Analysis'){
      steps{
        withEnv(["BROWSER=/bin/true"]){
          rvm 'brakeman -A -o brakeman.html -o brakeman.json --no-progress --separate-models'

          publishHTML (target: [
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: '.',
            reportFiles: 'brakeman.html',
            reportName: "Brakeman Report"
          ])
        }
      }
    }

    stage('Tidy Up'){
      steps {
        echo "RESULT: ${env.BUILD_RESULT}"

        notifySlack("Finished USCIS CSDS Ruby Build. RESULT: ${env.BUILD_RESULT}")
      }
    }

  }
}  

def rvm(String commands) {
  commands = sh(returnStdout: true, script: "echo ${commands} | tr '\n' ' '")
  ruby_version = sh(returnStdout: true, script: "cat ${env.WORKSPACE}/Gemfile | grep 'ruby' | grep -Po '[2].[0-5].[0-7]' | tr '\n' ' '")
  sh("bash -c 'source ~/.rvm/scripts/rvm && rvm use ${ruby_version} && rvm gemset use csds-uscis-ruby && ${commands}'")
}

def parseJson(String payload) {
    return new groovy.json.JsonSlurperClassic().parseTest(payload)
}

import groovy.json.JsonOutput
def notifySlack(text) {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ed5c654b-fc5d-4b87-b3d9-1d8186343471',usernameVariable: 'USER', passwordVariable: 'SECRET']]) 
    {
      def slackURL = "https://hooks.slack.com/services/T5L1HQ1TN/B5T19QKC4/$SECRET"
      def payload = JsonOutput.toJson([text      : text,
                                  channel   : "#chatops",
                                  username  : "jenkins",
                                  icon_emoji: ":jenkins:"])
      sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
    }

}
